{"version":3,"sources":["components/Navigation.js","App.js","serviceWorker.js","index.js","img/logo.png"],"names":["imgLogo","accessKey","endPoint","Navigation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","query","queryValue","bind","assertThisInitialized","searchImg","loaderImgs","state","page","images","totalPages","search","_this2","fetch","concat","then","response","json","jsonResponse","console","log","setState","results","_this3","pageNew","imagesNew","e","target","value","map","image","index","react_default","a","createElement","src","urls","thumb","key","alt","className","href","logo","id","placeholder","type","onKeyDown","onChange","lib_default","dataLength","length","next","hasMore","react_masonry_component_lib_default","Component","App","components_Navigation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fa29f989.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from '../img/logo.png';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Masonry from 'react-masonry-component';\nimport '../components/header.css';\nimport '../components/images.css';\n\nconst imgLogo = {\n    baseurl: \"http://localhost:3000\"\n};\n\nconst accessKey = '5dba6e676e02ab27153aaaf2e9484eba5ccb5725b72ab57341110e157c1889e1';\nconst endPoint = 'https://api.unsplash.com/search/photos'\n\n\nclass Navigation extends Component {\n    componentDidMount() {\n        this.searchImg();\n    }\n\n    constructor(props) {\n        super(props);\n        this.query = 'flores';\n        this.queryValue = this.queryValue.bind(this);\n        this.searchImg = this.searchImg.bind(this);\n        this.loaderImgs = this.loaderImgs.bind(this);\n\n        this.state = {\n            page: 1,\n            images: [],\n            totalPages: null,\n            search:\"\"\n        }\n    }\n\n    searchImg() {\n        fetch(`${endPoint}?query=${this.query}&client_id=${accessKey}&per_page=20&page=1`)\n            .then(response => {\n                return response.json()\n            }).then(jsonResponse => {\n                console.log(jsonResponse);\n                this.setState({\n                    images: jsonResponse.results\n                })\n            })\n    }\n\n    loaderImgs() {\n        let pageNew = this.page + 1\n        let imagesNew = this.state.images\n\n        fetch(`${endPoint}?query=${this.query}&client_id=${accessKey}&per_page=20&page=${this.page}`)\n            .then(response => {\n                return response.json()\n            }).then(jsonResponse => {\n                console.log(jsonResponse);\n                this.setState({\n                    page: pageNew,\n                    images: imagesNew.concat(jsonResponse.results)\n                })\n\n            })\n    }\n\n    queryValue(e) {\n        this.query = e.target.value;\n    }\n\n    images() {\n        return this.state.images.map((image, index) => {\n            return <img src={image.urls.thumb} key={index} alt=\"\" />\n        })\n    }\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                <div className=\"header\">\n                    <a href={imgLogo.baseurl} className=\"logo\" >\n                        <img src={logo} className=\"logoImg\" alt=\"pinterest\" />\n                    </a>\n\n                    <span> <i className=\"fa fa-search\" id=\"search\" ></i></span>\n                    <input placeholder=\"Buscar\" type=\"text\" onKeyDown={this.searchImg} onChange={this.queryValue} className=\"searching\"></input>\n                    <div className=\"searchBox\">\n                        <span className=\"send\">Inicio</span>\n                        <span className=\"seguir\">Siguiendo</span>\n                        <span className=\"name\">Vanessa</span>\n                        <span> <i className=\"fa fa-comment-dots\"></i></span>\n                        <span> <i className=\"fa fa-bell\"></i></span>\n                        <span> <i className=\"fa fa-ellipsis-h\"></i></span>\n                    </div>\n                </div>\n\n                <div className=\"returImages\">\n                    <InfiniteScroll\n                        dataLength={this.state.images.length}\n                        next={this.loaderImgs}\n                        hasMore={true}\n                    >\n                        <Masonry>\n                            {this.images()}\n                        </Masonry>\n                    </InfiniteScroll>\n                </div>\n\n            </div>\n        );\n    }\n}\n\n//onChange ejecuta la funcion queryValue cada vez que se modifica el valor del input\n//para que se guarde en this.query=''\n\n//al trabajar con eventos es importante asegurarse que el valor del contexto no cambie\n//para eso se usa el bind.import Images from './Images';\n\n\n//e.target dispara el evento y value es el valor\n\n//fetch: m√©todo del obj windows que permite hacer consultas a un servidor.\n//En la primera promesa obtenemos la respuesta completa del servidor y la retornamos en formato JSON para poder acceder a los datos que posee \n//y en la segunda promesa obtenemos nuestras imagenes y podemos manipularlas como queramos.\nexport default Navigation;","import React, { Component } from 'react';\nimport './App.css';\nimport Content from './components/Navigation';\nimport Navigation from './components/Navigation';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <Navigation/>\n        \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.899cd5e1.png\";"],"sourceRoot":""}